name: Pre Release

on:
  push:
    branches:
      - 'master'
      - 'main'
    # paths:
    # - .github/workflows/cmake.yml
  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.) 
  BUILD_TYPE: retail
  VERSION: RC

jobs:
  # linux-build:
  #   uses: ./.github/workflows/cmake_linux_x64.yml
  #   with: 
  #     build_type: retail
  #     version: RC
  # windows-build:
  #   uses: ./.github/workflows/cmake_windows_x64.yml
  #   with: 
  #     build_type: retail
  #     version: RC
  # windows-32-bit-build:
  #   uses: ./.github/workflows/cmake_windows_x86.yml
  #   with: 
  #     build_type: retail
  #     version: RC
  make-release:
    # needs: [ linux-build, windows-build, windows-32-bit-build ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Get run Id
      id: run_id
      run: echo "run_id=$(gh run list --workflow 'CMake Mock' --limit 1 --status completed | awk '{print $13}')" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Get log messages
      id: messages
      working-directory: ${{ github.workspace }}
      run: |
        git fetch --prune --unshallow --tags 
        COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:- %s)
        {
          echo 'messages<<EOF'
          cat "${COMMITS}"
          echo EOF
        } >> $GITHUB_OUTPUT
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d-%H-%M-%s')" >> $GITHUB_OUTPUT
    - name: Make release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly-${{ steps.date.outputs.date }}
        release_name: DOOM BFA Nightly ${{ steps.date.outputs.date }}
        body: |
          ${{ steps.messages.outputs.messages }}
        draft: false
        prerelease: true
    - name: Upload Linux Production Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: linux-${{env.VERSION}}-${{env.BUILD_TYPE}}
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
          mv ./build/DoomBFA DoomBFA
          mv ./base/DoomBFA.sh DoomBFA.sh
          mv ./build/vcpkg_installed/x64-linux/share/* ./third-party-licenses
          mv ./build/_deps/openxr-build/src/loader/* .
          chmod +x DoomBFA
          chmod +x DoomBFA.sh
    - name: Upload Linux Classic Edition Production Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: linux-${{env.VERSION}}-${{env.BUILD_TYPE}}-classic
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
              mv ./build/DoomBFA DoomBFA
              mv ./base/DoomBFA.sh DoomBFA.sh
              mv ./build/vcpkg_installed/x64-linux/share/* ./third-party-licenses
              mv ./build/_deps/openxr-build/src/loader/* .
              chmod +x DoomBFA
              chmod +x DoomBFA.sh
              chmod +x UDOOM.sh
              chmod +x DOOM2.sh
    - name: Upload Linux Debug Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: linux-${{env.VERSION}}-debug
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
          mv ./build/DoomBFA DoomBFA
          mv ./base/DoomBFA.sh DoomBFA.sh
          mv ./build/vcpkg_installed/x64-linux/share/* ./third-party-licenses
          mv ./build/_deps/openxr-build/src/loader/* .
          chmod +x DoomBFA
          chmod +x DoomBFA.sh
    - name: Upload x64 Windows Production Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: windows-${{env.VERSION}}-${{env.BUILD_TYPE}}-x64
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
          mv ./build/${{env.BUILD_TYPE}}/* .
          mv ./build/vcpkg_installed/x64-windows-static-md/share/* ./third-party-licenses
    - name: Upload x64 Windows Production Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: windows-${{env.VERSION}}-${{env.BUILD_TYPE}}-x64-classic
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
            mv ./build/${{env.BUILD_TYPE}}/* .
            mv ./build/vcpkg_installed/x64-windows-static-md/share/* ./third-party-licenses
    - name: Upload x64 Windows Debug Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: windows-${{env.VERSION}}-debug-x64
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
          mv ./build/retwithdebugsymbols/* .
          mv ./build/vcpkg_installed/x64-windows-static-md/share/* ./third-party-licenses
    - name: Upload x86 Windows Production Artifact
      uses: ./.github/actions/package_formatter
      with:
        artifact_name: windows-${{env.VERSION}}-${{env.BUILD_TYPE}}-x86
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        access_token: ${{ secrets.GITHUB_TOKEN }}
        second_token: ${{ secrets.GH_PAT }}
        run-id: ${{ steps.run_id.outputs.run_id }}
        commands: |
          mv ./build/${{env.BUILD_TYPE}}/* .
          mv ./build/vcpkg_installed/x86-windows-static-md/share/* ./third-party-licenses
